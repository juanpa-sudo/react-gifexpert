{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","Components/ImageGift.js","Components/Loading.js","Components/GridGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","input","setInput","onSubmit","e","preventDefault","trim","length","cat","type","className","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifts","map","image","id","title","images","downsized_medium","console","log","useFetchGifs","loading","state","setstate","then","img","setTimeout","ImageGift","src","alt","Loading","GridGif","element","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAgCeA,MA7Bf,YAAyC,IAAlBC,EAAiB,EAAjBA,cACrB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,sBAAMC,SARoB,SAACC,GAC3BA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAoBO,OAClCN,EAAS,MAIX,SACE,uBACEO,KAAK,OACLC,UAAU,WACVC,MAAOV,EACPW,YAAY,wBACZC,SAjBoB,SAACT,GACzBF,EAASE,EAAEU,OAAOH,a,+BCNTI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,qBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAQD,EAAKE,KAAI,SAACC,GAAW,IAAD,EAChC,MAAO,CACLC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbV,IAAG,UAAEQ,EAAMG,cAAR,aAAE,EAAcC,iBAAiBZ,QAGxCa,QAAQC,IAAIR,GAdS,kBAedA,GAfc,4CAAH,sDCqBLS,EAlBM,SAACjB,GACpB,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNW,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATArB,EAAQC,GAAUqB,MAAK,SAACC,GACtBC,YAAW,WACTH,EAAS,CACPb,KAAMe,EACNJ,SAAS,MAEV,QAGEC,GCNMK,MAVf,YAAwC,IAAnBZ,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAAKS,EAAM,EAANA,GAE/B,OADAI,QAAQC,IAAI,CAAEJ,QAAOV,MAAKS,OAExB,sBAAKjB,UAAU,yCAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BkB,IAC7B,qBAAKa,IAAKvB,EAAKwB,IAAKd,QCGXe,MARf,WACE,OACE,qBAAKjC,UAAU,aAAf,SACE,2BCqBSkC,MArBf,YAAgC,IAAb5B,EAAY,EAAZA,SAMjB,EAAiCiB,EAAajB,GAAhCU,EAAd,EAAQH,KAAaW,EAArB,EAAqBA,QACrB,OACE,qCACE,oBAAIxB,UAAU,wCAAd,SAAuDM,IACvD,sBAAKN,UAAU,OAAf,UACGwB,GAAW,cAAC,EAAD,IACXR,EAAMD,KAAI,SAACoB,GAAD,OACT,cAAC,EAAD,eAAgCA,GAAhBA,EAAQlB,cCEnBmB,MAhBf,WACE,MAAoC9C,mBAAS,CAAC,kBAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACGgD,EAAWtB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCR/BgC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.3ff2c02d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction AddCategory({ setCategories }) {\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n  const handleSubmitPrevent = (e) => {\n    e.preventDefault();\n    if (input.trim().length > 2) {\n      setCategories((cat) => [input, ...cat]);\n      setInput(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmitPrevent}>\n      <input\n        type=\"text\"\n        className=\"inputTex\"\n        value={input}\n        placeholder=\"Ingresa una Categoria\"\n        onChange={handleInputChange}\n      ></input>\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=PRTnhiH22jFJE8GOhRGLFIFL0Sli7U0K&q=${encodeURI(\n    category\n  )}&limit=9`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifts = data.map((image) => {\n    return {\n      id: image.id,\n      title: image.title,\n      url: image.images?.downsized_medium.url,\n    };\n  });\n  console.log(gifts);\n  return gifts;\n};\n","import { useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  getGifs(category).then((img) => {\n    setTimeout(() => {\n      setstate({\n        data: img,\n        loading: false,\n      });\n    }, 500);\n  });\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from \"react\";\n\nfunction ImageGift({ title, url, id }) {\n  console.log({ title, url, id });\n  return (\n    <div className=\"card animate__animated animate__shakeY\">\n      <h4 className=\"title_image\">{title}</h4>\n      <img src={url} alt={title} />\n    </div>\n  );\n}\n\nexport default ImageGift;\n","import React from \"react\";\n\nfunction Loading() {\n  return (\n    <div className=\"lds-circle\">\n      <div></div>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from \"react\";\nimport useFetchGifs from \"../hooks/useFetchGifs\";\nimport ImageGift from \"./ImageGift\";\nimport Loading from \"./Loading\";\n\nfunction GridGif({ category }) {\n  // const [image, setImage] = useState([]);\n\n  // useEffect(() => {\n  //   getGifs(category).then(setImage);\n  // }, [category]);\n  const { data: image, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\n      <div className=\"grid\">\n        {loading && <Loading></Loading>}\n        {image.map((element) => (\n          <ImageGift key={element.id} {...element}></ImageGift>\n        ))}\n        {/* <p>{loading ? \"cargando\" : \"data es llena\"}</p> */}\n      </div>\n    </>\n  );\n}\n\nexport default GridGif;\n","import React, { useState } from \"react\";\nimport AddCategory from \"./Components/AddCategory\";\nimport GridGif from \"./Components/GridGif\";\n\nfunction GifExpertApp() {\n  const [categories, setCategories] = useState([\"One Punch Man\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories}></AddCategory>\n      <ol>\n        {categories.map((category) => {\n          return <GridGif key={category} category={category}></GridGif>;\n        })}\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}